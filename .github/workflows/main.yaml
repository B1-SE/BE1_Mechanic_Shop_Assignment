name: Basic CI - Test and Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Verify Python version
      run: |
        python --version
        which python
        pip --version

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install dev dependencies with compatible versions
        pip install pytest==7.4.0 pytest-cov==4.1.0 flake8==6.0.0 black==23.3.0 isort==5.12.0 bandit==1.7.5 safety==3.2.7

    - name: List installed packages
      run: pip list

    - name: Run linters and formatters
      continue-on-error: true  # Continue even if linting fails during development
      run: |
        echo "Running flake8..."
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503 || echo "Flake8 issues found"
        
        echo "Checking black formatting..."
        black --check app/ tests/ || echo "Black formatting issues found"
        
        echo "Checking import sorting..."
        isort --check-only app/ tests/ || echo "Import sorting issues found"

    - name: Run security checks
      continue-on-error: true  # Continue even if security issues found during development
      run: |
        echo "Running bandit security scan..."
        bandit -r app/ || echo "Security issues found"
        
        echo "Running safety check..."
        safety check || echo "Safety issues found"

    - name: Run tests
      continue-on-error: true  # Continue even if tests fail during development
      run: |
        echo "Running pytest with coverage..."
        pytest tests/ \
          --cov=app \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=60 \
          -v \
          --tb=short

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella