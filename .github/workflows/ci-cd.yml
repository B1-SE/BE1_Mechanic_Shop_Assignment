name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        echo "Running pytest with coverage..."
        python -m pytest tests/ -v --cov=app --cov-report=html --cov-report=term-missing --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run security checks
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      run: |
        echo "ðŸš€ Deploying to Render..."
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": false}' \
          "https://api.render.com/v1/services/${{ secrets.SERVICE_ID }}/deploys"
        echo "âœ… Deployment triggered successfully!"

  frontend:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install

    - name: Build the frontend
      run: |
        npm run build

    - name: Deploy frontend to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build

  auth0:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Auth0 CLI
      run: |
        npm install -g auth0-cli

    - name: Login to Auth0
      env:
        AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
      run: |
        auth0 login --domain $AUTH0_DOMAIN --client-id $AUTH0_CLIENT_ID --client-secret $AUTH0_CLIENT_SECRET

    - name: Deploy to Auth0
      run: |
        auth0 deploy --tenant mechanichub --env production
        auth0 deploy --tenant mechanichub --env production --audience "https://be1-mechanic-shop-assignment.onrender.com"
        auth0 deploy --tenant mechanichub --env production --scope "openid profile email read:customers write:customers read:mechanics write:mechanics read:inventory write:inventory read:service-tickets write:service-tickets"